{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2025-05-16T14:28:52.289Z",
    "end": "2025-05-16T14:29:40.524Z",
    "duration": 48235,
    "testsRegistered": 1,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "36491f0a-44df-4693-add9-bb84f342f6a4",
      "title": "",
      "fullFile": "cypress\\e2e\\Gestor de modelos de agendas_Creación y configuración de modelo.cy.js",
      "file": "cypress\\e2e\\Gestor de modelos de agendas_Creación y configuración de modelo.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "41d93f88-afe9-46ae-8238-218f1f6e57fa",
          "title": "Gestor de modelos de agendas",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "debería iniciar sesión con éxito",
              "fullTitle": "Gestor de modelos de agendas debería iniciar sesión con éxito",
              "timedOut": null,
              "duration": 35289,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Llama a la función login \ncy.login_SDA();\n// Verifica que el login haya sido exitoso\ncy.url().should('not.include', '/login');\ncy.wait(1000);\ncy.get('#div_nombre_usuario', {\n  timeout: 10000\n}).should('be.visible').click();\ncy.get('#div_menu_cambiar_cuenta', {\n  timeout: 10000\n}).should('be.visible').click();\ncy.get('#div_seleccionar_rol_coordinador_nacional_de_reges', {\n  timeout: 10000\n}).should('be.visible').click();\ncy.wait(1000);\ncy.get(\"#btn_menu_desplegable\").should('be.visible').click();\ncy.wait(1000);\ncy.get(\"#spn_modulo_unidades_ejecutoras_gestordeagendas\").should('be.visible').click();\ncy.wait(1000);\ncy.get(\"#spn_submodulo_unidades_ejecutoras_modelos_agenda\").should('be.visible').click();\ncy.wait(1000);\ncy.get(\"#btn_menu_desplegable\").should('be.visible').click();\ncy.wait(1000);\ncy.wait(100).tab();\ncy.wait(100).tab();\ncy.get('#btn_Models_Agenda_Abrir_Modal_Crear_Agenda', {\n  timeout: 10000\n}).should('be.visible').click();\ncy.contains('div.ant-modal-title', 'Crear nuevo modelo de agenda').should('be.visible');\ncy.get('#input_Modal_Modelos_Agendas_Modelos_Name', {\n  timeout: 10000\n}).should('be.visible').click();\nconst randomNumber = Math.floor(Math.random() * (1000 - 500 + 1)) + 500;\ncy.get('#input_Modal_Modelos_Agendas_Modelos_Name').type(\"Prueba\" + randomNumber.toString()); //Escribir información\ncy.wait(100).tab();\ncy.document().then(doc => {\n  const activeElement = doc.activeElement;\n  cy.wrap(activeElement).should('exist'); // opcional: asegura que esté presente\n  cy.log('Elemento enfocado:', activeElement);\n  cy.wrap(activeElement).type('BOCAS DEL TORO').type('{enter}'); // por ejemplo\n});\ncy.wait(1000).tab();\n// 6. Unidad ejecutora\ncy.document().then(document => {\n  const focusedElement = document.activeElement;\n  // Asegurarse de que el elemento enfocado existe\n  cy.wrap(focusedElement).should('exist');\n  // Log informativo (opcional)\n  cy.log('Elemento actualmente enfocado:', focusedElement);\n  // Escribir texto y presionar Enter\n  cy.wrap(focusedElement).type('POLICLINICA DE GUABITO').type('{enter}');\n});\ncy.wait(1000).tab();\ncy.get('#form_Modal_Modelos_Agendas') // Encuentra el modal\n.find('[id=\"ddl_Modelos_Agendas_Estatus_id\"]') // Encuentra todos los elementos con ese id (aunque esté mal usado)\n.eq(1) // Selecciona el segundo\n.click({\n  force: true\n});\ncy.get('.ant-select-dropdown .ant-select-item-option:visible').first() // o .contains('Activo') si prefieres por texto\n.click({\n  force: true\n});\n//------------------------------------------------\nlet contador = 0;\nconst rutaArchivoExcel = 'cypress/fixtures/agenda.xlsx';\n// Leer los datos del archivo Excel\ncy.leerExcel(rutaArchivoExcel).then(datosExcel => {\n  // Mostrar los datos leídos\n  console.log(datosExcel);\n  // Recorrer los datos del archivo Excel\n  for (let i = 1; i < datosExcel.length; i++) {\n    // Comenzamos desde 1 para saltarnos la fila de encabezados\n    // Tomar el valor de la primera columna (DNI)\n    // Usar los datos del Excel\n    // Ingresar DNI\n    const DNI = datosExcel[i][0]; // Primer fila, primera columna (usando índices 0 basados)\n    if (DNI && DNI.trim() !== '') {\n      // Si el DNI es válido, proceder con la acción\n      cy.window().then(win => {\n        win.alert('El DNI es correcto');\n      });\n    } else {\n      // Si el DNI está vacío o no es válido, lanzar una alerta\n      cy.window().then(win => {\n        win.alert('Prueba exitosa');\n        cy.log('Prueba Finalizada: correctamente');\n        cy.pause();\n      });\n    }\n    cy.get('#validateDNI_dni', {\n      timeout: 1000\n    }).should('exist').should('be.visible').type(DNI).type('{enter}');\n    cy.get('#province').scrollIntoView().should('be.visible');\n    const PROVINCIA = datosExcel[i][1]; // Primer fila, primera columna (usando índices 0 basados)     \n    cy.get('#province', {\n      timeout: 1000\n    }).should('exist').should('be.visible').type(PROVINCIA).type('{enter}');\n    cy.get('input[type=\"radio\"][value=\"No\"]') // Selecciona el radio button con el valor \"No\"\n    .check();\n    // Usar los datos del Excel\n    // Unidad Ejecutora\n    cy.get('#executingUnit').scrollIntoView().should('be.visible');\n    const UNIDADE = datosExcel[i][2]; // Primer fila, primera columna (usando índices 0 basados)     \n    cy.get('#executingUnit', {\n      timeout: 1000\n    }).should('exist').should('be.visible').type(UNIDADE).type('{enter}');\n    cy.get('#requiredService') // Selecciona el elemento\n    .scrollIntoView() // Desplázate hacia el elemento para hacerlo visible\n    .should('be.visible') // Asegúrate de que el elemento sea visible\n    .type('Medicina general').type('{enter}');\n    cy.get('#select_Crear_Cita_Formulario_Modelo_Agenda') // Selecciona el elemento\n    .scrollIntoView() // Desplázate hacia el elemento para hacerlo visible\n    .should('be.visible') // Asegúrate de que el elemento sea visible\n    .type('Personalizado').type('{enter}');\n    cy.get('input[type=\"radio\"][value=\"NUEVO\"]') // Selecciona el radio button con el valor \"NUEVO\"\n    .check();\n    cy.get('input[type=\"radio\"][value=\"AM\"]') // Selecciona el radio button con el valor \"NUEVO\"\n    .check();\n    cy.pause();\n    cy.get('div.ant-card.ant-card-bordered.overrideCardBody').should('be.visible');\n    cy.contains('span.ant-typography', 'Fecha de la cita', {\n      timeout: 10000\n    }) // 10 segundos\n    .should('be.visible');\n    cy.contains('button', 'Asignar cita', {\n      timeout: 10000\n    }).should('not.be.disabled').click();\n    cy.pause();\n    contador++;\n    // Mostrar en la consola el contador y el DNI\n    cy.log(`Contador: ${contador}, DNI: ${DNI}`);\n  }\n});",
              "err": {
                "message": "Error: AssertionError: Timed out retrying after 4000ms: Expected to find element: `1`, but never found it. Queried from:\n\n              > cy.get(#form_Modal_Modelos_Agendas).find([id=\"ddl_Modelos_Agendas_Estatus_id\"])",
                "estack": "Error: AssertionError: Timed out retrying after 4000ms: Expected to find element: `1`, but never found it. Queried from:\n\n              > cy.get(#form_Modal_Modelos_Agendas).find([id=\"ddl_Modelos_Agendas_Estatus_id\"])",
                "diff": null
              },
              "uuid": "335626d3-3ca7-4f16-8f4a-2b59c6c49853",
              "parentUUID": "41d93f88-afe9-46ae-8238-218f1f6e57fa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "335626d3-3ca7-4f16-8f4a-2b59c6c49853"
          ],
          "pending": [],
          "skipped": [],
          "duration": 35289,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "results",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}
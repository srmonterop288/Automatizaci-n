{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2025-05-16T14:18:19.182Z",
    "end": "2025-05-16T14:19:16.096Z",
    "duration": 56914,
    "testsRegistered": 1,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "bf11bfd3-f466-457c-882d-6673ae43c5a8",
      "title": "",
      "fullFile": "cypress\\e2e\\Agenda diaria flujo completo.cy.js",
      "file": "cypress\\e2e\\Agenda diaria flujo completo.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9198ab50-57ef-45e5-ae86-b0092f549d31",
          "title": "Agenda diaria flujo completo",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "debería iniciar sesión con éxito",
              "fullTitle": "Agenda diaria flujo completo debería iniciar sesión con éxito",
              "timedOut": null,
              "duration": 50420,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Llama a la función login \ncy.login_SDA();\n// Verifica que el login haya sido exitoso\ncy.url().should('not.include', '/login');\ncy.wait(1000);\ncy.get('#div_nombre_usuario', {\n  timeout: 10000\n}).should('be.visible').click();\ncy.get('#div_menu_cambiar_cuenta', {\n  timeout: 10000\n}).should('be.visible').click();\ncy.get('#div_seleccionar_rol_supervisor_de_tramites_y_citas', {\n  timeout: 10000\n}).should('be.visible').click();\ncy.wait(1000);\ncy.get(\"#btn_menu_desplegable\").should('be.visible').click();\ncy.wait(1000);\ncy.get(\"#spn_modulo_unidades_ejecutoras_agendas\").should('be.visible').click();\ncy.wait(1000);\ncy.get(\"#btn_menu_desplegable\").should('be.visible').click();\ncy.wait(2000);\ncy.wait(100).tab();\ncy.wait(100).tab();\ncy.get('#select_Agendas_Servicio', {\n  timeout: 1000\n}).should('exist').should('be.visible').type('Medicina general').type('{enter}');\ncy.get('#select_Agendas_Especialidad', {\n  timeout: 1000\n}).should('exist').should('be.visible').type('Medicina general').type('{enter}');\ncy.get('#select_Agendas_Personal_Salud') // Selecciona el campo de búsqueda\n.click({\n  force: true\n}); // Forza el clic si es necesario\ncy.wait(500);\ncy.xpath('//*[@id=\"select_Agendas_Personal_Salud_list_0\"]').should('be.visible');\n// Si quieres interactuar con el elemento, puedes agregarlo así:\ncy.xpath('//*[@id=\"select_Agendas_Personal_Salud_list_0\"]').click();\ncy.get('#select_Agendas_Personal_Salud').parents('.ant-select') // sube al contenedor del select\n.find('.ant-select-selection-item') // busca el valor mostrado\n.invoke('text').then(doctor => {\n  cy.log('Valor del select: ' + doctor);\n  cy.get(\"#btn_Agendas_Crear_Agenda\").should('be.visible').click();\n  cy.wait(1000);\n  cy.xpath('//*[@id=\"date_picker_Creando_Agenda_Fecha_Inicio\"]').click();\n  cy.contains('a', 'Hoy').click();\n  cy.get('body').tab();\n  cy.wait(100).tab();\n  cy.wait(100).tab();\n  cy.wait(100).tab();\n  cy.wait(100).tab();\n  cy.get('#ddl_Creando_Agenda_Atencion_Semanal', {\n    timeout: 1000\n  }).should('exist').should('be.visible').type('Martes').type('{enter}');\n  cy.wait(100).tab();\n  cy.get('#ddl_Creando_Agenda_Consultorio_Martes') // Selecciona el campo de búsqueda\n  .click({\n    force: true\n  }); // Forza el clic si es necesario\n  cy.wait(500);\n  cy.get('#ddl_Creando_Agenda_Consultorio_Martes_list .ant-select-item-option') // Selecciona los elementos de la lista\n  .eq(2) // Toma el elemento 10\n  .click(); // Hace clic en el primer elemento\n  cy.wait(100).tab();\n  cy.get('#time_picker_Creando_Agenda_Horario_Martes', {\n    timeout: 1000\n  }).should('exist').should('be.visible').type('12:00 PM');\n  cy.wait(100).tab().type('1:00 PM').type('{enter}');\n  cy.wait(100).tab();\n  //---------------\n  cy.get('#btn_Creando_Agenda_Agregar_Cita_Martes', {\n    timeout: 10000\n  }) // espera hasta 10s\n  .should('be.visible').click();\n  cy.get('#ddl_Creando_Agenda_Tipo_Cita_0_Martes').click(); // este es el botón/select\n  cy.get('#ddl_Creando_Agenda_Tipo_Cita_0_Martes_list', {\n    timeout: 10000\n  }).should('be.visible').contains('Nuevo') // O el texto de la opción que querés\n  .click();\n  cy.wait(100).tab();\n  cy.get('#ddl_Creando_Agenda_Equivalencia_0_Martes', {\n    timeout: 1000\n  }).should('exist').should('be.visible').type('60 min').type('{enter}');\n  cy.wait(100).tab();\n  cy.get('#ddl_Creando_Agenda_Numero_Citas_0_Martes', {\n    timeout: 1000\n  }).should('exist').should('be.visible').type('1 citas').type('{enter}');\n  cy.wait(100).tab();\n  cy.get('#btn_Creando_Agenda_Crear').scrollIntoView().should('be.visible').click();\n  cy.wait(1000);\n  cy.contains('button', 'Siguiente') // Busca el botón que contiene el texto 'Siguiente'\n  .click();\n  cy.wait(1000);\n  cy.contains('button', 'Finalizar') // Busca el botón que contiene el texto 'Finalizar'\n  .click();\n  //validar agenda _...............................\n  cy.wait(1000);\n  cy.get(\"#btn_menu_desplegable\").should('be.visible').click();\n  cy.wait(1000);\n  cy.get(\"#spn_modulo_unidades_ejecutoras_asignaciondecitas\").should('be.visible').click();\n  cy.wait(1000);\n  cy.get(\"#spn_submodulo_unidades_ejecutoras_citas\").should('be.visible').click();\n  cy.wait(1000);\n  cy.get(\"#btn_menu_desplegable\").should('be.visible').click();\n  cy.wait(1000);\n  cy.wait(100).tab();\n  cy.wait(100).tab();\n  //------------------------------------------------\n  let contador = 0;\n  const rutaArchivoExcel = 'cypress/fixtures/agenda.xlsx';\n  // Leer los datos del archivo Excel\n  cy.leerExcel(rutaArchivoExcel).then(datosExcel => {\n    // Mostrar los datos leídos\n    console.log(datosExcel);\n    // Recorrer los datos del archivo Excel\n    for (let i = 1; i < datosExcel.length; i++) {\n      // Comenzamos desde 1 para saltarnos la fila de encabezados\n      // Tomar el valor de la primera columna (DNI)\n      // Usar los datos del Excel\n      // Ingresar DNI\n      const DNI = datosExcel[i][0]; // Primer fila, primera columna (usando índices 0 basados)\n      if (DNI && DNI.trim() !== '') {\n        // Si el DNI es válido, proceder con la acción\n        cy.window().then(win => {\n          win.alert('El DNI es correcto');\n        });\n      } else {\n        // Si el DNI está vacío o no es válido, lanzar una alerta\n        cy.window().then(win => {\n          win.alert('Prueba exitosa');\n          cy.log('Prueba Finalizada: correctamente');\n          cy.pause();\n        });\n      }\n      cy.get('#validateDNI_dni', {\n        timeout: 1000\n      }).should('exist').should('be.visible').type(DNI).type('{enter}');\n      cy.get('#province').scrollIntoView().should('be.visible');\n      const PROVINCIA = datosExcel[i][1]; // Primer fila, primera columna (usando índices 0 basados)     \n      cy.get('#province', {\n        timeout: 1000\n      }).should('exist').should('be.visible').type(PROVINCIA).type('{enter}');\n      cy.get('input[type=\"radio\"][value=\"No\"]') // Selecciona el radio button con el valor \"No\"\n      .check();\n      // Usar los datos del Excel\n      // Unidad Ejecutora\n      cy.get('#executingUnit').scrollIntoView().should('be.visible');\n      const UNIDADE = datosExcel[i][2]; // Primer fila, primera columna (usando índices 0 basados)     \n      cy.get('#executingUnit', {\n        timeout: 1000\n      }).should('exist').should('be.visible').type(UNIDADE).type('{enter}');\n      cy.get('#requiredService') // Selecciona el elemento\n      .scrollIntoView() // Desplázate hacia el elemento para hacerlo visible\n      .should('be.visible') // Asegúrate de que el elemento sea visible\n      .type('Medicina general').type('{enter}');\n      cy.get('#select_Crear_Cita_Formulario_Modelo_Agenda') // Selecciona el elemento\n      .scrollIntoView() // Desplázate hacia el elemento para hacerlo visible\n      .should('be.visible') // Asegúrate de que el elemento sea visible\n      .type('Personalizado').type('{enter}');\n      cy.get('input[type=\"radio\"][value=\"NUEVO\"]') // Selecciona el radio button con el valor \"NUEVO\"\n      .check();\n      cy.get('#select_Crear_Cita_Formulario_Personal_Salud', {\n        timeout: 1000\n      }).should('exist').should('be.visible').type(doctor).type('{enter}');\n      cy.get('input[type=\"radio\"][value=\"PM\"]') // Selecciona el radio button con el valor \"NUEVO\"\n      .check();\n      contador++;\n      // Mostrar en la consola el contador y el DNI\n      cy.log(`Contador: ${contador}, DNI: ${DNI}`);\n    }\n  });\n});",
              "err": {
                "message": "Error: AssertionError: Timed out retrying after 4000ms: Expected to find content: 'Siguiente' within the selector: 'button' but never did.",
                "estack": "Error: AssertionError: Timed out retrying after 4000ms: Expected to find content: 'Siguiente' within the selector: 'button' but never did.",
                "diff": null
              },
              "uuid": "1d49974f-7dac-486e-8e90-b23547287a56",
              "parentUUID": "9198ab50-57ef-45e5-ae86-b0092f549d31",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "1d49974f-7dac-486e-8e90-b23547287a56"
          ],
          "pending": [],
          "skipped": [],
          "duration": 50420,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "results",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}
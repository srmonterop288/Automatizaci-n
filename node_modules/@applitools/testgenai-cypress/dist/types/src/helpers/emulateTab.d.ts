export declare function emulateTab(doc?: Document): boolean;
export declare namespace emulateTab {
    /**
     * emulate tab from a given element (default is active element)
     *
     * @returns methods to select tab target
     */
    const from: typeof emulateTabFrom;
    /**
     * emulate tab from active element to a given target
     *
     * @param target element to switch to
     * @param sendKeyEventsWithShiftModifier like shift tab would do
     * @returns true if switched elemenet and false if default action had been prevented
     */
    const to: (target: HTMLElement, sendKeyEventsWithShiftModifier?: boolean) => boolean;
    /**
     * emulate tab to previous element
     *
     * @returns true if switched elemenet and false if default action had been prevented
     */
    const backwards: () => boolean;
    /**
     * alias for emulateTab() that is more precise about it's direction
     *
     * @returns true if switched elemenet and false if default action had been prevented
     */
    const forwards: () => boolean;
    /**
     * find all elements that are selectable by tab
     */
    const findSelectableElements: () => HTMLElement[];
}
declare function emulateTabFrom(source?: HTMLElement): {
    /**
     * emulate tab to the element before the starting element (which is the active element by default)
     *
     * @returns true if switched elemenet and false if default action had been prevented
     */
    toPreviousElement: () => boolean;
    /**
     * emulate tab to the element after the starting element (which is the active element by default)
     *
     * @returns true if switched elemenet and false if default action had been prevented
     */
    toNextElement: () => boolean;
    /**
     * emulate tab to a custom given element
     *
     * @param target element after tab
     * @param sendKeyEventsWithShiftModifier like shift tab would do
     * @returns true if switched elemenet and false if default action had been prevented
     */
    to: (target: HTMLElement, sendKeyEventsWithShiftModifier?: boolean) => boolean;
};
export {};

export default class BaseRequestService {
    baseUrl: string;
    authHeaders: any;
    static RequestFunction: (method: any, url: any, data: any, responseType: any, contentType: any, authorize: any) => any;
    constructor(baseUrl?: string);
    private get apiKey();
    makeRequest(method: any, endpoint: any, data?: any, responseType?: any, contentType?: string, authorize?: boolean): Promise<string | null>;
    static xhrRequest(method: any, url: any, data: any, responseType: any, contentType: any, accessToken: any): Promise<unknown>;
    makeAuthRequest(method: any, endpoint: any, data?: any, responseType?: any, contentType?: string): Promise<string | null>;
    private static buildRejectResponse;
    post(endpoint: any, data: any, isAuth?: boolean): Promise<string>;
    get(endpoint: any, params?: any, isAuth?: boolean): Promise<string>;
    getBlob(endpoint: any, isAuth?: boolean): Promise<string>;
}

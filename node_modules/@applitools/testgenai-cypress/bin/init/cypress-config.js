"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ts_morph_1 = require("ts-morph");
const helpers_1 = require("./helpers");
exports.default = (cypressRoot) => {
    const project = new ts_morph_1.Project({});
    const sourceFile = project.addSourceFileAtPathIfExists(`${cypressRoot}/cypress.config.ts`) || project.addSourceFileAtPathIfExists(`${cypressRoot}/cypress.config.js`);
    if (!sourceFile)
        throw new Error('Cypress config file not found');
    const moduleImportPath = '@applitools/testgenai-cypress/tasks';
    (0, helpers_1.addImport)(sourceFile, {
        moduleSpecifier: moduleImportPath,
        namedImports: ['testGenAICypressTasksSetup']
    });
    updateSetupNodeEvents(sourceFile);
    updateEnv(sourceFile);
    sourceFile.formatText();
    sourceFile.saveSync();
};
const isCypressCommonJS = (sourceFile) => {
    return sourceFile.getFilePath().endsWith('.js');
};
const getDefineConfig = (sourceFile) => {
    if (isCypressCommonJS(sourceFile)) {
        let moduleExportAssignment = sourceFile.getExportAssignments().find(node => node.getText().startsWith('export default'));
        let callExpression = moduleExportAssignment ? moduleExportAssignment.getChildrenOfKind(ts_morph_1.SyntaxKind.CallExpression)[0] : null;
        if (!callExpression) {
            callExpression = sourceFile
                .getChildrenOfKind(ts_morph_1.SyntaxKind.ExpressionStatement).find(node => node.getText().startsWith('module.exports'))
                .getChildrenOfKind(ts_morph_1.SyntaxKind.BinaryExpression)[0]
                .getChildrenOfKind(ts_morph_1.SyntaxKind.CallExpression)[0];
        }
        return callExpression.getArguments()[0].asKindOrThrow(ts_morph_1.SyntaxKind.ObjectLiteralExpression);
    }
    else {
        const importDeclaration = sourceFile.getDefaultExportSymbol().getDeclarations()[0].getChildrenOfKind(ts_morph_1.SyntaxKind.CallExpression)[0];
        return importDeclaration.getArguments()[0].asKindOrThrow(ts_morph_1.SyntaxKind.ObjectLiteralExpression);
    }
};
const updateSetupNodeEvents = (file) => {
    const getE2eObject = (defineConfig) => {
        const get = () => defineConfig.getChildrenOfKind(ts_morph_1.SyntaxKind.PropertyAssignment)
            .find(node => node.getName() === 'e2e');
        if (!get()) {
            defineConfig.addPropertyAssignment({
                name: 'e2e',
                initializer: '{}'
            });
        }
        return get().getInitializerIfKindOrThrow(ts_morph_1.SyntaxKind.ObjectLiteralExpression);
    };
    let e2eObject = getE2eObject(getDefineConfig(file));
    const get = () => e2eObject.getProperty('setupNodeEvents');
    if (!get()) {
        e2eObject.addPropertyAssignment({
            name: 'setupNodeEvents',
            initializer: `function(on) {
        testGenAICypressTasksSetup(on);
      }`,
        });
    }
    else {
        let obj = get().asKind(ts_morph_1.SyntaxKind.MethodDeclaration) || get().asKind(ts_morph_1.SyntaxKind.FunctionExpression) || get().asKind(ts_morph_1.SyntaxKind.PropertyAssignment).getInitializerIfKind(ts_morph_1.SyntaxKind.FunctionExpression);
        const parameters = obj.getParameters();
        let firstArgName = parameters[0] ? parameters[0].getName() : 'on';
        if (parameters.length === 0) {
            obj.addParameter({
                name: 'on'
            });
        }
        obj.addStatements(`testGenAICypressTasksSetup(${firstArgName});`);
    }
};
const updateEnv = (file) => {
    const envKey = 'applitoolsTestGenAI';
    const objToAdd = `{
    autohealDataFolders: ['cypress/testgenai/autoheal'],
  }`;
    const defineConfig = getDefineConfig(file);
    const get = () => defineConfig
        .getChildrenOfKind(ts_morph_1.SyntaxKind.PropertyAssignment)
        .find(node => node.getName() === 'env');
    if (!get()) {
        defineConfig.addPropertyAssignment({
            name: "env",
            initializer: `{
        ${envKey}: ${objToAdd}
      }`,
        });
    }
    else {
        const envObject = get().getInitializerIfKindOrThrow(ts_morph_1.SyntaxKind.ObjectLiteralExpression);
        envObject.addPropertyAssignment({
            name: envKey,
            initializer: objToAdd
        });
    }
};
